/**
 * Reports Page - B√°o c√°o & Ph√¢n t√≠ch
 * Trang t·ªïng h·ª£p t·∫•t c·∫£ b√°o c√°o v·ªõi tabs: Overview, Revenue, Performance, Customer
 */

import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { vi } from "date-fns/locale";
import {
  CalendarIcon,
  Download,
  RefreshCw,
  TrendingUp,
  BarChart3,
  PieChart,
  Users,
} from "lucide-react";
import RevenueChart from "@/components/admin/RevenueChart";
import PerformanceAnalytics from "@/components/admin/PerformanceAnalytics";
import VehicleStatusChart from "@/components/admin/VehicleStatusChart";
import TopPerformersChart from "@/components/admin/TopPerformersChart";

// Mock data for TopPerformersChart
const mockTopVehicles = [
  {
    id: "1",
    name: "Tesla Model 3 Long Range",
    value: 127,
    subtitle: "30A-12345",
    rank: 1,
  },
  {
    id: "2",
    name: "VinFast VF8 Plus",
    value: 98,
    subtitle: "51F-67890",
    rank: 2,
  },
  {
    id: "3",
    name: "Toyota Camry 2.5Q",
    value: 87,
    subtitle: "29B-11122",
    rank: 3,
  },
  {
    id: "4",
    name: "Mazda CX-5 2.0",
    value: 76,
    subtitle: "30G-33344",
    rank: 4,
  },
  {
    id: "5",
    name: "Honda CR-V 1.5L",
    value: 65,
    subtitle: "51G-55566",
    rank: 5,
  },
  {
    id: "6",
    name: "Hyundai Tucson",
    value: 54,
    subtitle: "29A-77788",
    rank: 6,
  },
  { id: "7", name: "Kia Seltos", value: 43, subtitle: "30H-99900", rank: 7 },
  {
    id: "8",
    name: "Ford Ranger Wildtrak",
    value: 38,
    subtitle: "51E-12312",
    rank: 8,
  },
];

const mockTopCustomers = [
  {
    id: "1",
    name: "Nguy·ªÖn VƒÉn A",
    value: 85600000,
    subtitle: "0901234567 ‚Ä¢ 23 l·∫ßn thu√™",
    rank: 1,
  },
  {
    id: "2",
    name: "Tr·∫ßn Th·ªã B",
    value: 72300000,
    subtitle: "0912345678 ‚Ä¢ 18 l·∫ßn thu√™",
    rank: 2,
  },
  {
    id: "3",
    name: "L√™ VƒÉn C",
    value: 68900000,
    subtitle: "0923456789 ‚Ä¢ 16 l·∫ßn thu√™",
    rank: 3,
  },
  {
    id: "4",
    name: "Ph·∫°m Th·ªã D",
    value: 54200000,
    subtitle: "0934567890 ‚Ä¢ 14 l·∫ßn thu√™",
    rank: 4,
  },
  {
    id: "5",
    name: "Ho√†ng VƒÉn E",
    value: 47800000,
    subtitle: "0945678901 ‚Ä¢ 12 l·∫ßn thu√™",
    rank: 5,
  },
  {
    id: "6",
    name: "V≈© Th·ªã F",
    value: 41200000,
    subtitle: "0956789012 ‚Ä¢ 10 l·∫ßn thu√™",
    rank: 6,
  },
  {
    id: "7",
    name: "ƒê·∫∑ng VƒÉn G",
    value: 35600000,
    subtitle: "0967890123 ‚Ä¢ 9 l·∫ßn thu√™",
    rank: 7,
  },
  {
    id: "8",
    name: "B√πi Th·ªã H",
    value: 29800000,
    subtitle: "0978901234 ‚Ä¢ 7 l·∫ßn thu√™",
    rank: 8,
  },
];

type DateRange = {
  from: Date | undefined;
  to: Date | undefined;
};

export default function Reports() {
  const [activeTab, setActiveTab] = useState("overview");
  const [dateRange, setDateRange] = useState<DateRange>({
    from: new Date(2025, 9, 1), // October 1, 2025
    to: new Date(2025, 9, 11), // October 11, 2025
  });
  const [isRefreshing, setIsRefreshing] = useState(false);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1000));
    setIsRefreshing(false);
  };

  const handleExport = () => {
    // TODO: Implement export functionality
    alert("Xu·∫•t b√°o c√°o CSV/Excel - T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn");
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            üìä B√°o c√°o & Ph√¢n t√≠ch
          </h1>
          <p className="text-gray-600 mt-1">
            Ph√¢n t√≠ch doanh thu, hi·ªáu su·∫•t v√† kh√°ch h√†ng
          </p>
        </div>

        <div className="flex items-center gap-3">
          {/* Date Range Picker */}
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className={cn(
                  "justify-start text-left font-normal",
                  !dateRange && "text-muted-foreground",
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {dateRange?.from ? (
                  dateRange.to ? (
                    <>
                      {format(dateRange.from, "dd/MM/yyyy")} -{" "}
                      {format(dateRange.to, "dd/MM/yyyy")}
                    </>
                  ) : (
                    format(dateRange.from, "dd/MM/yyyy")
                  )
                ) : (
                  <span>Ch·ªçn kho·∫£ng th·ªùi gian</span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="end">
              <Calendar
                initialFocus
                mode="range"
                defaultMonth={dateRange?.from}
                selected={{
                  from: dateRange?.from,
                  to: dateRange?.to,
                }}
                onSelect={(range) =>
                  setDateRange({
                    from: range?.from,
                    to: range?.to,
                  })
                }
                numberOfMonths={2}
                locale={vi}
              />
            </PopoverContent>
          </Popover>

          {/* Refresh Button */}
          <Button
            variant="outline"
            size="icon"
            onClick={handleRefresh}
            disabled={isRefreshing}
          >
            <RefreshCw
              className={cn("h-4 w-4", isRefreshing && "animate-spin")}
            />
          </Button>

          {/* Export Button */}
          <Button onClick={handleExport}>
            <Download className="h-4 w-4 mr-2" />
            Xu·∫•t b√°o c√°o
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <Tabs
        value={activeTab}
        onValueChange={setActiveTab}
        className="space-y-6"
      >
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            T·ªïng quan
          </TabsTrigger>
          <TabsTrigger value="revenue" className="flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            Doanh thu
          </TabsTrigger>
          <TabsTrigger value="performance" className="flex items-center gap-2">
            <PieChart className="h-4 w-4" />
            Hi·ªáu su·∫•t
          </TabsTrigger>
          <TabsTrigger value="customer" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            Kh√°ch h√†ng
          </TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-2 gap-6">
            {/* Revenue Chart */}
            <div className="col-span-2">
              <RevenueChart />
            </div>

            {/* Vehicle Status */}
            <VehicleStatusChart />

            {/* Performance Analytics */}
            <div className="col-span-1">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">üìà Hi·ªáu su·∫•t nhanh</CardTitle>
                  <CardDescription>C√°c ch·ªâ s·ªë quan tr·ªçng</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-4 bg-blue-50 rounded-lg">
                      <p className="text-sm text-muted-foreground">
                        T·ªïng ƒë∆°n thu√™
                      </p>
                      <p className="text-2xl font-bold text-blue-700">1,248</p>
                      <p className="text-xs text-green-600 mt-1">+15.3% ‚Üë</p>
                    </div>
                    <div className="p-4 bg-green-50 rounded-lg">
                      <p className="text-sm text-muted-foreground">
                        ƒêang ho·∫°t ƒë·ªông
                      </p>
                      <p className="text-2xl font-bold text-green-700">156</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        12.5%
                      </p>
                    </div>
                    <div className="p-4 bg-red-50 rounded-lg">
                      <p className="text-sm text-muted-foreground">T·ª∑ l·ªá h·ªßy</p>
                      <p className="text-2xl font-bold text-red-700">7.0%</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        87 ƒë∆°n
                      </p>
                    </div>
                    <div className="p-4 bg-purple-50 rounded-lg">
                      <p className="text-sm text-muted-foreground">
                        Ho√†n th√†nh
                      </p>
                      <p className="text-2xl font-bold text-purple-700">
                        93.0%
                      </p>
                      <p className="text-xs text-green-600 mt-1">Xu·∫•t s·∫Øc ‚úì</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Top Performers */}
          <div className="grid grid-cols-2 gap-6">
            <TopPerformersChart
              title="üèÜ Top xe ƒë∆∞·ª£c thu√™ nhi·ªÅu nh·∫•t"
              data={mockTopVehicles}
              valueLabel="L∆∞·ª£t thu√™"
              showRankBadge
            />
            <TopPerformersChart
              title="üëë Top kh√°ch h√†ng VIP"
              data={mockTopCustomers}
              valueLabel="Doanh thu"
              showRankBadge
            />
          </div>
        </TabsContent>

        {/* Revenue Tab */}
        <TabsContent value="revenue" className="space-y-6">
          <RevenueChart />

          <Card>
            <CardHeader>
              <CardTitle>üí∞ Chi ti·∫øt doanh thu</CardTitle>
              <CardDescription>Ph√¢n t√≠ch doanh thu theo ngu·ªìn</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-3 gap-4">
                <div className="p-4 border rounded-lg">
                  <p className="text-sm text-muted-foreground mb-2">
                    Doanh thu thu√™ xe
                  </p>
                  <p className="text-2xl font-bold text-green-700">5.85B VNƒê</p>
                  <p className="text-xs text-green-600 mt-1">
                    89.7% t·ªïng doanh thu
                  </p>
                </div>
                <div className="p-4 border rounded-lg">
                  <p className="text-sm text-muted-foreground mb-2">
                    Ph·ª• ph√≠ & Extra
                  </p>
                  <p className="text-2xl font-bold text-blue-700">520M VNƒê</p>
                  <p className="text-xs text-blue-600 mt-1">
                    8.0% t·ªïng doanh thu
                  </p>
                </div>
                <div className="p-4 border rounded-lg">
                  <p className="text-sm text-muted-foreground mb-2">Ph√≠ kh√°c</p>
                  <p className="text-2xl font-bold text-purple-700">150M VNƒê</p>
                  <p className="text-xs text-purple-600 mt-1">
                    2.3% t·ªïng doanh thu
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Performance Tab */}
        <TabsContent value="performance" className="space-y-6">
          <PerformanceAnalytics />
        </TabsContent>

        {/* Customer Tab */}
        <TabsContent value="customer" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>üë• Ph√¢n t√≠ch kh√°ch h√†ng</CardTitle>
              <CardDescription>ƒêang ph√°t tri·ªÉn - Coming soon</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="py-12 text-center text-muted-foreground">
                <Users className="h-16 w-16 mx-auto mb-4 opacity-50" />
                <p>T√≠nh nƒÉng ph√¢n t√≠ch kh√°ch h√†ng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn</p>
                <p className="text-sm mt-2">
                  S·∫Ω bao g·ªìm: User m·ªõi, Retention rate, CLV, Ph√¢n kh√∫c kh√°ch
                  h√†ng
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Top Customers */}
          <TopPerformersChart
            title="üëë Top kh√°ch h√†ng VIP (Theo doanh thu)"
            data={mockTopCustomers}
            valueLabel="Doanh thu"
            showRankBadge
          />
        </TabsContent>
      </Tabs>
    </div>
  );
}
